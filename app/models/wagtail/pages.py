import re

from django.db import models
from django.utils.text import slugify
from django.utils.translation import get_language_from_request
from wagtail import blocks
from wagtail.admin.panels import FieldPanel, ObjectList, TabbedInterface
from wagtail.core.rich_text import RichText
from wagtail.fields import RichTextField, StreamField
from wagtail.models import Page

import app.models.wagtail.blocks as app_blocks

from .cms import CMSImage

block_features = [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "bold",
    "italic",
    "link",
    "ol",
    "ul",
    "hr",
    "link",
    "document-link",
    "image",
    "embed",
    "blockquote",
]


# We'll be wrapping the original RichText.__html__(), so make
# sure we have a reference to it that we can call.
__original__html__ = RichText.__html__

# This matches an h1/.../h6, using a regexp that is only
# guaranteed to work because we know that the source of
# the HTML code we'll be working with generates nice
# and predictable HTML code (and note the non-greedy
# "one or more" for the heading content).
heading_re = r"<h([1-6])([^>]*)>(.+?)</h\1>"


def add_id_attribute(match):
    """
    This is a regexp replacement function that takes
    in the above regex match results, and then turns:
        <h1>some text</h1>
    Into:
        <h1><a id="some-text"></a><a href="#some-text">some text</a></h1>
    where the id attribute value is generated by running
    the heading text through Django's slugify() function.
    """
    n = match.group(1)
    attributes = match.group(2)
    text_content = match.group(3)
    id = slugify(text_content)
    return f'<h{n}{attributes} id="{id}"><a href="#{id}" class="no-underline">{text_content}</a></h{n}>'


def with_heading_ids(self):
    """
    We don't actually change how RichText.__html__ works, we just replace
    it with a function that does "whatever it already did", plus a
    substitution pass that adds fragment ids and their associated link
    elements to any headings that might be in the rich text content.
    """
    html = __original__html__(self)
    return re.sub(heading_re, add_id_attribute, html)


# Rebind the RichText's html serialization function such that
# the output is still entirely functional as far as wagtail
# can tell, except with headings enriched with fragment ids.
RichText.__html__ = with_heading_ids


class HomePage(Page):
    max_count_per_parent = 1
    page_description = "Website home page. Should only be one such page per locale."
    parent_page_type = []
    show_in_menus_default = True
    layout = StreamField(
        [
            ("links_section", app_blocks.HomepageSectionBlock()),
            ("map_section", app_blocks.HomepageMapBlock()),
            ("magazine_section", app_blocks.HomepageMagazineBlock()),
            ("summary_text", app_blocks.PageSummaryBlock()),
            ("richtext", blocks.RichTextBlock()),
        ],
        null=True,
        blank=True,
        use_json_field=True,
    )
    content_panels = Page.content_panels + [FieldPanel("layout")]


class StaticPage(Page):
    page_description = "For general information."
    show_in_menus_default = True

    # Content
    layout = StreamField(
        [
            ("richtext", blocks.RichTextBlock()),
            ("embeddable_code", app_blocks.HTMLBlock()),
        ],
        null=True,
        blank=True,
        use_json_field=True,
    )
    content_panels = Page.content_panels + [FieldPanel("layout")]

    # Layout
    show_header = models.BooleanField(default=True)
    show_footer = models.BooleanField(default=True)
    layout_panels = [FieldPanel("show_header"), FieldPanel("show_footer")]

    edit_handler = TabbedInterface(
        [
            ObjectList(content_panels, heading="Content"),
            ObjectList(layout_panels, heading="Layout"),
            ObjectList(Page.promote_panels, heading="Promote"),
            ObjectList(Page.settings_panels, heading="Settings", classname="settings"),
        ]
    )


class MagazineIndexPage(Page):
    page_description = "Home page for the magazine section of the site."
    max_count_per_parent = 1
    parent_page_type = ["app.HomePage"]
    subpage_types = [
        "app.MagazineArticlePage",
    ]
    show_in_menus_default = True
    # layout = StreamField([

    # ], null=True, blank=True, use_json_field=True)
    # content_panels = Page.content_panels + [FieldPanel("layout")]


class MagazineArticlePage(Page):
    page_description = "For blog posts, news reports, updates and so on."
    parent_page_type = ["app.MagazineIndexPage"]
    show_in_menus_default = True
    short_description = models.CharField(max_length=300)
    cover_image = models.ForeignKey(
        CMSImage, null=True, blank=True, on_delete=models.SET_NULL, related_name="+"
    )
    article = RichTextField()
    layout = StreamField(
        [
            ("richtext", blocks.RichTextBlock()),
            ("embeddable_code", app_blocks.HTMLBlock()),
        ],
        null=True,
        blank=True,
        use_json_field=True,
    )
    content_panels = Page.content_panels + [
        FieldPanel("short_description"),
        FieldPanel("layout"),
    ]


class TopicContextMixin:
    def get_context(self, request, *args, **kwargs):
        context = super().get_context(request, *args, **kwargs)
        language_code = get_language_from_request(request)

        context.update(
            {
                "current_topic": self.get_ancestors(inclusive=True)
                .type(TopicHomepage)
                .first(),
                "all_topics": TopicHomepage.objects.filter(
                    locale__language_code=language_code
                )
                .live()
                .public()
                .in_menu()
                .all(),
            }
        )
        return context


class TopicHomepage(TopicContextMixin, Page):
    page_description = "Overview of guides and resources related to a topic or theme."
    subpage_types = ["app.TopicPage"]
    show_in_menus_default = True
    short_description = models.CharField(max_length=300)
    layout = StreamField(
        [
            ("links_gallery", app_blocks.GuideSection()),
            ("featured_link", app_blocks.FeaturedLinkBlock()),
            ("richtext", blocks.RichTextBlock()),
        ],
        null=True,
        blank=True,
        use_json_field=True,
    )
    content_panels = Page.content_panels + [
        FieldPanel("short_description"),
        FieldPanel("layout"),
    ]

    # def get_context(self, request, *args, **kwargs):
    #     context = super().get_context(request, *args, **kwargs)
    #     context.update({
    #         "all_topics": TopicHomepage.objects.live().in_menu()
    #     })
    #     return context


class TopicPage(TopicContextMixin, Page):
    page_description = "Guide / resource page for a specific task or question."
    parent_page_type = ["app.TopicHomepage", "app.TopicPage"]
    subpage_types = ["app.TopicPage"]
    show_in_menus_default = True
    short_description = models.CharField(max_length=300)
    layout = StreamField(
        [
            ("richtext", blocks.RichTextBlock()),
            ("links_gallery", app_blocks.GuideSection()),
            ("featured_link", app_blocks.FeaturedLinkBlock())
            # TODO: direct link to tasks via API
            # TODO: code block
            # TODO: github repo block
            # TODO: map!
            # TODO: related projects, articles, etc.
        ],
        null=True,
        blank=True,
        use_json_field=True,
    )
    content_panels = Page.content_panels + [
        FieldPanel("short_description"),
        FieldPanel("layout"),
    ]

    # def get_context(self, request, *args, **kwargs):
    #     context = super().get_context(request, *args, **kwargs)
    #     context.update({
    #         "all_topics": TopicHomepage.objects.live().in_menu()
    #     })
    #     return context
